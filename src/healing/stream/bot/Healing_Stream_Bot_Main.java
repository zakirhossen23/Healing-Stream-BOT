/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package healing.stream.bot;

import org.openqa.selenium.WebDriver;

import javax.swing.*;

/**
 * @author zakir
 */
public class Healing_Stream_Bot_Main extends javax.swing.JFrame {
    public static WebDriver driver;
    public static boolean status = true;
    // Variables declaration - do not modify                     
    private javax.swing.JButton startBTN;
    public static javax.swing.JLabel statusLBL;
    private javax.swing.JButton stopBTN;


    /**
     * Creates new form Healing_Stream_Bot_Main
     */
    public Healing_Stream_Bot_Main() {
        initComponents();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Healing_Stream_Bot_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Healing_Stream_Bot_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Healing_Stream_Bot_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Healing_Stream_Bot_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Healing_Stream_Bot_Main().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startBTN = new javax.swing.JButton();
        stopBTN = new javax.swing.JButton();
        statusLBL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Healing Stream Bot");
        setName("MainFrame"); // NOI18N

        startBTN.setText("Start");
        startBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBTNActionPerformed(evt);
            }
        });

        stopBTN.setText("Stop");
        stopBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBTNActionPerformed(evt);
            }
        });

        statusLBL.setText("Status");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(83, 83, 83)
                                .addComponent(startBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(stopBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(89, 89, 89))
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(statusLBL)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(startBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(stopBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                                .addComponent(statusLBL)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void stopBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBTNActionPerformed
  status=false;
  statusLBL.setText("Stopped!!!");
    }//GEN-LAST:event_stopBTNActionPerformed

    private void startBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBTNActionPerformed
        try{

                statusLBL.setText("Starting...");
                status=true;
                AutoReg obj = new AutoReg();
        obj.start();

            } catch (Exception e) {
                try {
                    Runtime.getRuntime().exec("taskkill /F /IM chromedriver.exe");
                } catch (Exception ex) {
                }

                JOptionPane.showMessageDialog(null,
                        "Change the chrome driver",
                        "Version error",
                        JOptionPane.INFORMATION_MESSAGE);

//           String[] sentences = e.getMessage().split("browser version is ");
//           String[] sentences2 = sentences[1].split(" with binary");
//System.out.println(sentences2[0]);
//URL url;
//String downloadver = "";
//String getversionlink = "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_"+sentences2[0].substring(0,2);
//        try {
//
//            url = new URL(getversionlink);
//
//            HttpURLConnection http = (HttpURLConnection)url.openConnection();
//            http.setRequestMethod("GET");
//            downloadver=URLEncoder.encode("https://chromedriver.storage.googleapis.com/LATEST_RELEASE_"+sentences2[0].substring(0,2)+"/");
//            System.out.println(getversionlink);
//              BufferedReader in = new BufferedReader(
//          new InputStreamReader(http.getInputStream()));
//            downloadver=in.readLine();
//http.disconnect();
//
//        } catch (Exception ex) {
//            Logger.getLogger(Healing_Stream_Bot_Main.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//
//String downloadlink = "https://chromedriver.storage.googleapis.com/"+downloadver+"/chromedriver_win32.zip";
//download downloading = new download();
//        try {
//            Runtime.getRuntime().exec("taskkill /F /IM chromedriver.exe");
//
//
//   File f= new File("C:\\ChromeDriver\\chromedriver.exe");           //file to be delete
//        FileUtils.forceDelete(f);
// } catch(Exception e2){System.out.print(e2);};
//
//
//int output = downloading.downloadfile(downloadlink);
//

//continue starting;
            }

        }


    }//GEN-LAST:event_startBTNActionPerformed
    // End of variables declaration                   
